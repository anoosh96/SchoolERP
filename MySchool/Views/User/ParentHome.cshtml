



@{
    Layout = null;
    MySchool.Models.SchoolContext school = new MySchool.Models.SchoolContext();
    IEnumerable<MySchool.Models.Student> std;
    IEnumerable<MySchool.Models.Due> dues;
    string pid = Session["username"].ToString();
    std = school.Students.Include("Parent").Include("Class").Where(m => m.Parent.ParentId.Equals(pid));
    dues = school.Dues.Include("Student").ToList();

    IEnumerable<MySchool.Models.Notification> anc = school.Notifications.Where(n => (n.Recepient.Equals("parent") || n.Recepient.Equals("everyone") || n.UserID.Equals(pid)) && !n.SeenBy.Contains(pid));

    int num = anc.Count();
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>StudentHome</title>
    <link rel="stylesheet" href="~/Content/navbar.css" type="text/css" />

    <script>
/* When the user clicks on the button,
toggle between hiding and showing the dropdown content */
        function myFunction(id) {

            var dropdowns = document.getElementsByClassName("dropdown-content");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
  document.getElementById("myDropdown"+id).classList.toggle("show");
}

// Close the dropdown if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {
    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}
    </script>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: Arial, Helvetica, sans-serif;
        }

        /* Style the header */
        header {
            background-color: #00004d;
            padding-top: 1px;
            padding-bottom: 1px;
            text-align: left-center;
            font-size: 32px;
            color: white;
        }

        /* Container for flexboxes */
        section {
            display: -webkit-flex;
            display: flex;
        }

        


        /* Style the content */
        article {
            -webkit-flex: 3;
            -ms-flex: 3;
            flex: 3;
            background-color: #ffff99;
            padding-bottom: 800px;
            margin-left: -100px;
        }

        /* Style the footer */
        footer {
            background-color: #777;
            padding: 10px;
            text-align: center;
            color: white;
        }

        /* Responsive layout - makes the menu and the content (inside the section) sit on top of each other instead of next to each other */


        img {
            float: left;
            margin-top: -1px;
        }

        .box {
            width: auto;
            height: auto;
            margin: 100px;
            padding: 100px;
            background-color: #00004d;
            color: white;
            display: inline-block;
            border-radius: 5px;
        }

        .box2 {
            width: 450px;
            height: 300px;
            margin: 19px 17px;
            background: white;
            display: inline-block;
            border-radius: 5px;
            border: 1px solid black;
            box-sizing: border-box;
        }

        .box3 {
            width: 450px;
            height: 300px;
            margin: 19px 17px;
            background: white;
            display: inline-block;
            border-radius: 5px;
            border: 1px solid black;
            box-sizing: border-box;
        }

        table {
            border-collapse: collapse;
            width: 165%;
            margin-left: -30%;
            margin-top: -25%;
            margin-bottom: 10px;
            
        }

        th, td {
            text-align: left;
            padding: 8px;
            border:solid;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

         #popup {
            border-radius: 20px;
            background-color: white;
            padding: 20%;
            margin: 20px 30px 20px 30px;
            position:;
        }
        

        .panel-heading {
  font-size: 20px;
  background-color:orangered;
  color:white;
  padding: 10px 15px;
  border-bottom: 1px solid transparent;
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
}

        .button#b1 {
            background-color: #4CAF50;
            border-radius: 2px;
            color: white;
            padding: 10px 30px;
            text-align: center;
            text-decoration: none;
            display: block;
            font-size: 16px;
            margin: 40px 2px;
            cursor: pointer;
            width: 10%;
            float: right;
        }

        .imagelink {
            background: url(../../Content/images/new.jpg) no-repeat top left;
            border-radius: 0px;
            width: 203px;
            height: 124px;
        }
    </style>

</head>

<body>



    <header>
        <a href='@Url.Action("ParentHome","User")'><img src="~/Content/images/new logo 5.jpg" style="border-radius:5px; width:203px;height:124px;"></a>
        <b style="position:absolute;right:35px;top:20px;font-size:20px;">Parent</b>
        <a href='@Url.Action("Login","User")' class="button" id="b1">Logout</a>
        <h4 style="text-align:left; margin-left: 300px;"> <b>Welcome To FGS</b> Management System</h4>
    </header>

    <section>
        <nav>
            <ul>








                <li>
                    <div class="dropdown">
                        <button onclick="myFunction('5')" class="dropbtn">
                            @{if (num != 0)
                                {<span class="badge">@num</span>} }Announcements &#9660
                        </button>
                        <div id="myDropdown5" class="dropdown-content">
                            @Html.ActionLink("View Announcements", "ViewAnnouncementsParent", "Communication")
                           
                        </div>

                    </div>



                    <hr />
                </li>

                <li>
                    <div class="dropdown">
                        <button onclick="myFunction('8')" class="dropbtn">Result &#9660</button>
                        <div id="myDropdown8" class="dropdown-content">
                            @Html.ActionLink("View Result", "ViewResultParent", "Result")

                        </div>

                    </div>



                    <hr />
                </li>


                
                <li>
                    <div class="dropdown">
                        <button onclick="myFunction('7')" class="dropbtn">Attendance &#9660</button>
                        <div id="myDropdown7" class="dropdown-content">
                            @Html.ActionLink("View Attendance", "ViewAttendanceParent", "Attendance")
                        </div>

                    </div>
                    <hr />
                </li>
            </ul>

        </nav>

        

        <article>
            <div class="panel-heading">
                <b>My Children</b>
                <img src="~/Content/images/family1.png" style="width:50px;height:50px;margin-right:10px" />

                
            </div>
            
            <div id="popup" style="overflow-y:scroll; overflow-x: auto;">
                <table class="table">
                    <tr>
                        <th>
                            Student Name
                        </th>
                        <th>
                            Student ID
                        </th>
                        <th>
                             Dues
                        </th>
                        <th>
                            Parent Name
                        </th>


                    </tr>

                    @foreach (var item in std)
                    {
                        <tr>
                            <td>
                                @item.FirstName
                            </td>
                            <td>
                                @item.StudentID
                            </td>
                            
                                @{
                                    var list = dues.Where(m => m.Student.StudentID.Equals(item.StudentID)).ToList();
                                    if (list.Count>0)
                                    {
                                        <td>
                                            @foreach (var item2 in list)
                                            {
                                                <span>@item2.DueType &emsp; @item2.Amount Rs.</span>
                                                <br />
                                            }
                                        </td>
                                    }
                                    else
                                    {
                                        <td>No Dues</td>
                                    }
                                 }
                                
                            
                            <td>
                                @item.Parent.ParentName
                            </td>

                            
                        </tr>
                    }

                </table>
            </div>



            
           


        </article>


    </section>

    <footer>
        <p>Footer</p>
    </footer>

</body>
</html>


